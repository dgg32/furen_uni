
CREATE CONSTRAINT drug_index IF NOT EXISTS FOR (c:Drug) REQUIRE c.cui IS UNIQUE
;
CREATE CONSTRAINT moa_index IF NOT EXISTS FOR (m:MOA) REQUIRE m.id IS UNIQUE
;
CREATE CONSTRAINT disorder_index IF NOT EXISTS FOR (d:Disorder) REQUIRE d.cui IS UNIQUE
;
CREATE CONSTRAINT atc_index IF NOT EXISTS FOR (a:ATC) REQUIRE a.atc IS UNIQUE
;


LOAD CSV WITH HEADERS FROM 'file:///moa.tsv' AS row FIELDTERMINATOR '\t'  MERGE (m:MOA {name: row.name, id: row.id}) 
;
CALL apoc.load.jsonArray('file:///drugs.json') YIELD value MERGE  (d:Drug {cui: value.cui, name: value.name, level: value.level, tradename: coalesce(value.tradename, []), atc: value.atc}) 
;


LOAD CSV WITH HEADERS FROM 'file:///drug_moa.tsv' AS row FIELDTERMINATOR '\t'  MERGE (d:Drug {cui: row.from}) MERGE (m:MOA {id: row.to}) MERGE (d)-[r:HAS_MOA]->(m)
;



//demo part
CALL apoc.load.jsonArray('file:///atc.json') YIELD value MERGE  (a:ATC {cui: value.cui, name: value.name, level: value.level, atc: value.atc}) 
;
CALL apoc.load.jsonArray('file:///disorders.json') YIELD value MERGE  (d:Disorder {cui: value.cui, name: value.name, definition: value.definition, definitionEmbedding: value.definitionEmbedding}) 
;
LOAD CSV WITH HEADERS FROM 'file:///atc_atc.tsv' AS row FIELDTERMINATOR '\t'  MERGE (a1:ATC {atc: row.from}) MERGE (a2:ATC {atc: row.to}) MERGE (a1)-[r:BELONGS_TO]->(a2)
;
LOAD CSV WITH HEADERS FROM 'file:///drug_atc.tsv' AS row FIELDTERMINATOR '\t'  MERGE (d:Drug {cui: row.from}) MERGE (a:ATC {atc: row.to}) MERGE (d)-[r:BELONGS_TO]->(a)
;
LOAD CSV WITH HEADERS FROM 'file:///drug_disorder.tsv' AS row FIELDTERMINATOR '\t'  MERGE (d:Drug {cui: row.from}) MERGE (d2:Disorder {cui: row.to}) MERGE (d)-[r:MAY_TREAT]->(d2)
;


// vector definitionEmbedding
CREATE VECTOR INDEX disorder_embeddings_index
FOR (n:Disorder) ON (n.definitionEmbedding)
OPTIONS {indexConfig: {
 `vector.dimensions`: 1536,
 `vector.similarity_function`: 'cosine'
}};

// In case something wrong, run the following to clean up

DROP CONSTRAINT drug_index
;
DROP CONSTRAINT moa_index
;
DROP CONSTRAINT disorder_index
;
DROP CONSTRAINT atc_index
;
DROP INDEX disorder_embeddings_index
;

MATCH (n)
DETACH DELETE n;





MATCH (d:Disorder {name: 'Diabetes Mellitus, Non-Insulin-Dependent'})
CALL db.index.vector.queryNodes('disorder_embeddings_index', 5, d.definitionEmbedding)
YIELD node AS simmilarDisorder, score
RETURN simmilarDisorder.name AS name, score







MATCH (a:Drug) RETURN a;
MATCH (a:Drug) RETURN a LIMIT 5;


MATCH p=(d:Drug) -->(m:Disorder) RETURN p LIMIT 5;
MATCH p=(a:Drug) -->(m:Disorder) <--(c:Drug) RETURN p LIMIT 5;



MATCH (a:Drug) -->(m:Disorder) RETURN a.name LIMIT 5;


MATCH (d:Drug) WHERE d.name = "peramivir" RETURN d

MATCH (d:Drug {name: "peramivir"}) RETURN d



MATCH (d:Drug) WHERE  "Glynase" in d.tradename RETURN d



MATCH (d:Drug) --> (m:Disorder {name: "Influenza"}) RETURN AVG(d.level)



MATCH (d:Drug) --> (m:Disorder) 
RETURN m.name, sum(d.level) LIMIT 5;

MATCH (d:Drug) --> (m:Disorder) 
RETURN m.name, sum(d.level) AS total_level 
ORDER BY total_level DESC LIMIT 5;

MATCH (d:Drug) 
RETURN d.name, SIZE(d.tradename) / d.level AS tradename_level 
ORDER BY tradename_level DESC LIMIT 10;

MATCH (d:Drug) --> (m:Disorder {name: "Influenza"})
WITH SUM(SIZE(d.tradename)) AS tradename_count_total

MATCH (d:Drug) --> (m:Disorder {name: "Influenza"})
RETURN d.name, 100*SIZE(d.tradename)/tradename_count_total



:params my_disorder => 'Influenza'
MATCH (d:Drug) --> (m:Disorder {name: $my_disorder})
WITH SUM(SIZE(d.tradename)) AS tradename_count_total

MATCH (d:Drug) --> (m:Disorder {name: $my_disorder})
RETURN d.name, 100*SIZE(d.tradename)/tradename_count_total

MATCH (n)
DETACH DELETE n;
